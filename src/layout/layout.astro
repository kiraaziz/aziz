---
import SideBar from '@/components/SideBar'
import { Loader2 } from 'lucide-react'
import Footer from '@/components/static/v2/Footer.astro'
import './../lib/style/index.css'

const { pathname } = Astro.url
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="google-site-verification" content="XrMtRnC_cvsvQFEGE5FMyzEZOuCtjfMyDScEvfJz6rU" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>
      Kira Aziz {pathname.split('/')[1] && ': ' + pathname.split('/')[1]}
    </title>
  </head>
  <body class="bg-background relative text-foreground">
    <div class="flex items-center justify-center spinner h-[100svh] w-full bg-background fixed top-0 right-0 z-50">
      <Loader2 className="text-primary animate-spin" />
    </div>
    <div class="h-screen w-screen bg fixed top-0 right-0 z-0"></div>
    <div class="flex h-[100svh] w-full flex-col z-10">
      <SideBar navigation:persist client:load pathname={pathname} />
      <main id="root" class="overflow-auto h-[calc(100svh_-_4rem)] z-10 overflow-x-hidden">
        <div class="h-max p-5 lg:p-10">
          <slot />
          <div class="w-full h-20"></div>
        </div>
        <Footer />
      </main>
    </div>
    <script>
      (function() {
          let observer = null;

          function initScrollAnimation() {
              if (observer) {
                  observer.disconnect();
              }

              const elementsToAnimate = document.querySelectorAll('.to-start-animation');
              
              if (elementsToAnimate.length === 0) {
                  return;
              }

              observer = new IntersectionObserver((entries) => {
                  entries.forEach(entry => {
                      if (entry.isIntersecting) {
                          entry.target.classList.remove('to-start-animation');
                          entry.target.classList.add('animate-element');
                          
                          observer.unobserve(entry.target);
                      }
                  });
              }, {
                  threshold: 0.01,  
                  rootMargin: '0px 0px -50px 0px'
              });
              
              elementsToAnimate.forEach(element => {
                  observer.observe(element);
              });
          }

          function handleDOMReady() {
              initScrollAnimation();
              
              const mainContent = document.getElementById('root');
              if (mainContent) {
                  const mutationObserver = new MutationObserver((mutations) => {
                      let shouldReinit = false;
                      
                      mutations.forEach((mutation) => {
                          if (mutation.type === 'childList') {
                              mutation.addedNodes.forEach((node: any) => {
                                  if (node.nodeType === Node.ELEMENT_NODE) {
                                      if (node.classList?.contains('to-start-animation') || 
                                          node.querySelector?.('.to-start-animation')) {
                                          shouldReinit = true;
                                      }
                                  }
                              });
                          }
                      });
                      
                      if (shouldReinit) {
                          setTimeout(initScrollAnimation, 50);
                      }
                  });
                  
                  mutationObserver.observe(mainContent, {
                      childList: true,
                      subtree: true
                  });
              }
          }

          if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', handleDOMReady);
          } else {
              handleDOMReady();
          }

          document.addEventListener('astro:page-load', initScrollAnimation);
          
          (window as any).reinitScrollAnimation = initScrollAnimation;
      })();
    </script>
  </body>
</html>
